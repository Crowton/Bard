Exp	      ::= IntLit  |  BoolLit  |  StringLit
			| Id
			| Exp BinOp Exp
			| UnOp Exp
			| if (Exp) then Exp [else Exp]
			| Exp (Exp [Typean] [, Exp [Typean]]*)
			| (Exp)
			| let Decls in Exp end
		
IntLit    ::= 0  |  1  |  2  |  ...
			(['0' - '9']+)
BoolLit   ::= true  |  false
StringLit ::= "...

Id        ::= x  |  y  |  z  |  f  |  g  |  h  |  ...
			(['a' - 'z' 'A' - 'Z' '_'] ['a' - 'z' 'A' - 'Z' '0' - '9' '_']*)

BinOp     ::= +  |  -  |  *  |  /
			| <  |  <=  |  ==
		    | &  |  |(or)  
			| ^

UnOp      ::= -  |  !

Decls     ::= 

Typean	  ::= : Type
Type      ::= Int  |  Boolean  |  String  |  Unit  |  (Type [, Type]*) => Type
