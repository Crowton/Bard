let /* Tuples */
	fun tuple2(a, b) = (f) => f(a, b)
	fun index2_1(t) = t((a, b) => a)
	fun index2_2(t) = t((a, b) => b)

	fun tuple3(a, b, c) = (f) => f(a, b, c)
	fun index3_1(t) = t((a, b, c) => a)
	fun index3_2(t) = t((a, b, c) => b)
	fun index3_3(t) = t((a, b, c) => c)

	fun tuple4(a, b, c, d) = (f) => f(a, b, c, d)
	fun index4_1(t) = t((a, b, c, d) => a)
	fun index4_2(t) = t((a, b, c, d) => b)
	fun index4_3(t) = t((a, b, c, d) => c)
	fun index4_4(t) = t((a, b, c, d) => d)

	fun tuple5(a, b, c, d, e) = (f) => f(a, b, c, d, e)
	fun index5_1(t) = t((a, b, c, d, e) => a)
	fun index5_2(t) = t((a, b, c, d, e) => b)
	fun index5_3(t) = t((a, b, c, d, e) => c)
	fun index5_4(t) = t((a, b, c, d, e) => d)
	fun index5_5(t) = t((a, b, c, d, e) => e)

	/* List stuff */
	val nil = tuple3(true, -1, -1)
	fun cons(x, xs) = tuple3(false, x, xs)
	val is_empty = index3_1
	fun head(list) = list((empty, x, xs) => if empty then list_is_empty else x)
	fun tail(list) = list((empty, x, xs) => if empty then list_is_empty else xs)

	/* Transition */
	fun get_transition(transitions_list, state, symbol) =
		if is_empty(transitions_list) then tuple4(false, -1, -1, -1)
		else
			let val t = head(transitions_list)
			in
				if state == index5_1(t) & symbol == index5_2(t) then tuple4(true, index5_3(t), index5_4(t), index5_5(t))
				else get_transition(tail(transitions_list), state, symbol)
			end

	/* Run tape */
	fun run(state, tape, transitions_list) =
		if state < 0 then tuple2(state, tape)
		else if is_empty(tape) then run(state, cons(0, nil), transitions_list)
		else
			let val t = get_transition(transitions_list, state, head(tape))
				val success = index4_1(t)
				val stateTo = index4_2(t)
				val symbolWrite = index4_3(t)
				val headMove = index4_4(t)
			in
				if ~success then tuple2(-2, tape)
				else
					if headMove == -1 then tuple2(stateTo, cons(symbolWrite, tail(tape)))
					else if headMove == 0 then run(stateTo, cons(symbolWrite, tail(tape)), transitions_list)
					else
						let val rec = run(stateTo, tail(tape), transitions_list)
							val rec_state = index2_1(rec)
							val rec_tape = index2_2(rec)
						in
							if rec_state < 0 then tuple2(rec_state, cons(symbolWrite, rec_tape))
							else run(rec_state, cons(symbolWrite, rec_tape), transitions_list)
						end
			end
	
	/* Format tape */
	fun symbol_to_string(symbol) =
		if symbol == 0 then "_"
		else if symbol == 1 then "0"
		else if symbol == 2 then "1"
		else if symbol == 3 then "2"
		else if symbol == 4 then "3"
		else if symbol == 5 then "4"
		else if symbol == 6 then "5"
		else if symbol == 7 then "6"
		else if symbol == 8 then "7"
		else if symbol == 9 then "8"
		else if symbol == 10 then "9"
		else if symbol == 11 then "1'"
		else if symbol == 12 then "2'"
		else if symbol == 13 then "3'"
		else if symbol == 14 then "4'"
		else if symbol == 15 then "5'"
		else if symbol == 16 then "6'"
		else if symbol == 17 then "7'"
		else if symbol == 18 then "8'"
		else "9'"

	fun tape_to_string(tape) =
		if is_empty(tape) then ""
		else symbol_to_string(head(tape)) ^ " " ^ tape_to_string(tail(tape))

	/* Number to string */
	fun mod(x, n) = x - x / n * n
	fun number_to_string(i) =
		let fun digitToString(d) =
				if i == 0 then "0" else
				if i == 1 then "1" else
				if i == 2 then "2" else
				if i == 3 then "3" else
				if i == 4 then "4" else
				if i == 5 then "5" else
				if i == 6 then "6" else
				if i == 7 then "7" else
				if i == 8 then "8"
				else "9"

			fun rec_fixer(i) =
				if i == 0 then ""
				else rec_fixer(i / 10) ^ digitToString(mod(i, 10))
		in
			if i == 0 then "0"
			else if i > 0 then rec_fixer(i)
			else "-" ^ rec_fixer(-i)
		end
	
	fun state_to_string(state) =
		if state == -2 then "Reject"
		else if state == -1 then "Accept"
		else number_to_string(state)
in
	let in
		"\nEnding State:   " ^ state_to_string(index2_1(res)) ^
		"\nResulting tape: " ^ tape_to_string(index2_2(res))
	end
end
