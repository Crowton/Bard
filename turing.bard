let /* Transition entries */
	fun tuple5(a, b, c, d, e) = (f) => f(a, b, c, d, e)
	fun index_1(t) = t((a, b, c, d, e) => a)
	fun index_2(t) = t((a, b, c, d, e) => b)
	fun index_3(t) = t((a, b, c, d, e) => c)
	fun index_4(t) = t((a, b, c, d, e) => d)
	fun index_5(t) = t((a, b, c, d, e) => e)

	/* List stuff */
	val nil = (f) => f(true, -1, -1)
	fun cons(x, xs) = (f) => f(false, x, xs)
	fun is_empty(list) = list((empty, _, _) => empty)
	fun head(list) = list((empty, x, xs) => if empty then list_is_empty else x)
	fun tail(list) = list((empty, x, xs) => if empty then list_is_empty else xs)

	/* Transition */
	fun get_transition_res(success, stateTo, symbolWrite, headMove) = (f) => f(success, stateTo, symbolWrite, headMove)
	fun res_success(r) = r((success, stateTo, symbolWrite, headMove) => success)
	fun res_stateTo(r) = r((success, stateTo, symbolWrite, headMove) => stateTo)
	fun res_symbolWrite(r) = r((success, stateTo, symbolWrite, headMove) => symbolWrite)
	fun res_headMove(r) = r((success, stateTo, symbolWrite, headMove) => headMove)
	fun get_transition(transitions_list, state, symbol) =
		if is_empty(transitions_list) then get_transition_res(false, -1, -1, -1)
		else
			let val t = head(transitions_list)
			in
				if state == index_1(t) & symbol == index_2(t) then get_transition_res(true, index_3(t), index_4(t), index_5(t))
				else get_transition(tail(transitions_list), state, symbol)
			end

	/* Run tape */
	fun run_res(state, tape) = (f) => f(state, tape)
	fun run(state, tape, transitions_list) =
		if state < 0 then run_res(state, tape)
		else if is_empty(tape) then run(state, cons(0, nil), transitions_list)
		else
			let val t = get_transition(transitions_list, state, head(tape))
				val success = res_success(t)
				val stateTo = res_stateTo(t)
				val symbolWrite = res_symbolWrite(t)
				val headMove = res_headMove(t)
			in
				if ~success then run_res(-2, tape)
				else
					if headMove == -1 then run_res(stateTo, cons(symbolWrite, tail(tape)))
					else if headMove == 0 then run(stateTo, cons(symbolWrite, tail(tape)), transitions_list)
					else
						let val rec = run(stateTo, tail(tape), transitions_list)
							val rec_state = rec((a, b) => a)
							val rec_tape = rec((a, b) => b)
						in
							if rec_state < 0 then run_res(rec_state, cons(symbolWrite, rec_tape))
							else run(rec_state, cons(symbolWrite, rec_tape), transitions_list)
						end
			end
	
	/* Clone transitions */
	val clone_transitions =
		cons(tuple5(0, 0, 1, 0, 1),
		cons(tuple5(1, 1, 2, 2, 1),
		cons(tuple5(1, 3, 6, 4, 1),
		cons(tuple5(1, 0, 8, 0, -1),
		cons(tuple5(2, 1, 2, 1, 1),
		cons(tuple5(2, 3, 2, 3, 1),
		cons(tuple5(2, 0, 3, 0, 1),
		cons(tuple5(3, 1, 3, 1, 1),
		cons(tuple5(3, 3, 3, 3, 1),
		cons(tuple5(3, 0, 4, 1, -1),
		cons(tuple5(4, 1, 4, 1, -1),
		cons(tuple5(4, 3, 4, 3, -1),
		cons(tuple5(4, 0, 5, 0, -1),
		cons(tuple5(5, 2, 1, 2, 1),
		cons(tuple5(5, 4, 1, 4, 1),
		cons(tuple5(5, 1, 5, 1, -1),
		cons(tuple5(5, 3, 5, 3, -1),
		cons(tuple5(6, 1, 6, 1, 1),
		cons(tuple5(6, 3, 6, 3, 1),
		cons(tuple5(6, 0, 7, 0, 1),
		cons(tuple5(7, 1, 7, 1, 1),
		cons(tuple5(7, 3, 7, 3, 1),
		cons(tuple5(7, 0, 4, 3, -1),
		cons(tuple5(8, 2, 8, 1, -1),
		cons(tuple5(8, 4, 8, 3, -1),
		cons(tuple5(8, 0, -1, 0, 0),
		nil))))))))))))))))))))))))))
	
	/* Initial tape = "_abbabaaba" */
	val initial_tape =
		cons(0,
		cons(1,
		cons(3,
		cons(3,
		cons(1,
		cons(3,
		cons(1,
		cons(1,
		cons(3,
		cons(1,
		nil))))))))))
	
	/* Format tape */
	fun symbol_to_string(symbol) =
		if symbol == 0 then "_"
		else if symbol == 1 then "a"
		else if symbol == 2 then "A"
		else if symbol == 3 then "b"
		else "B"

	fun tape_to_string(tape) =
		if is_empty(tape) then ""
		else symbol_to_string(head(tape)) ^ " " ^ tape_to_string(tail(tape))

	/* Number to string */
	fun mod(x, n) = x - x / n * n
	fun numberToString(i) =
		let fun digitToString(d) =
				if i == 0 then "0" else
				if i == 1 then "1" else
				if i == 2 then "2" else
				if i == 3 then "3" else
				if i == 4 then "4" else
				if i == 5 then "5" else
				if i == 6 then "6" else
				if i == 7 then "7" else
				if i == 8 then "8"
				else "9"

			fun rec_fixer(i) =
				if i == 0 then ""
				else rec_fixer(i / 10) ^ digitToString(mod(i, 10))
		in
			if i == 0 then "0"
			else if i > 0 then rec_fixer(i)
			else "-" ^ rec_fixer(-i)
		end

	/* Run the desired tape */
	val res = run(0, initial_tape, clone_transitions)
in
	"\nEnding State:   " ^ numberToString(res((a, _) => a)) ^
	"\nResulting tape: " ^ tape_to_string(res((_, a) => a))
end
